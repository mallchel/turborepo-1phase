const path = require('path');
const HtmlWebpackPlugin = require('html-webpack-plugin');
const MiniCssExtractPlugin = require('mini-css-extract-plugin');
const CopyWebpackPlugin = require('copy-webpack-plugin');
const ReactRefreshWebpackPlugin = require('@pmmmwh/react-refresh-webpack-plugin');

const isDevelopment = process.env.NODE_ENV !== 'production';

module.exports = {
  entry: './main.tsx',
  mode: isDevelopment ? 'development' : 'production',
  output: {
    path: path.join(__dirname, './dist/test-1'),
    filename: !isDevelopment ? '[name].[contenthash].js' : '[name].js',
    clean: true,
  },
  resolve: {
    extensions: ['.tsx', '.ts', '.js'],
  },
  module: {
    rules: [
      {
        test: /\.(ts|tsx)$/,
        exclude: /node_modules/,
        use: {
          loader: 'babel-loader',
          options: {
            presets: [
              '@babel/preset-env',
              '@babel/preset-react',
              '@babel/preset-typescript',
            ].filter(Boolean),
            plugins: [
              isDevelopment && require.resolve('react-refresh/babel'),
            ].filter(Boolean),
          },
        },
      },
      {
        test: /\.scss$/,
        use: [
          !isDevelopment ? MiniCssExtractPlugin.loader : 'style-loader',
          'css-loader',
          'sass-loader',
        ],
      },
      {
        test: /\.svg$/,
        use: ['@svgr/webpack'],
      },
      {
        test: /\.(png|jpg|jpeg|gif|ico)$/,
        type: 'asset/resource',
      },
      {
        test: /\.js$/,
        enforce: 'pre', // Ensures Webpack reads existing source maps
        use: ['source-map-loader'],
        exclude: /node_modules/, // Exclude third-party packages
      },
    ],
  },
  devServer: {
    port: 4200,
    historyApiFallback: {
      index: '/index.html',
      disableDotRule: true,
      htmlAcceptHeaders: ['text/html', 'application/xhtml+xml'],
    },
    hot: true,
  },
  plugins: [
    isDevelopment && new ReactRefreshWebpackPlugin(),
    new HtmlWebpackPlugin({
      template: './index.html',
      base: '/',
    }),
    new MiniCssExtractPlugin({
      filename: !isDevelopment ? '[name].[contenthash].css' : '[name].css',
    }),
    new CopyWebpackPlugin({
      patterns: [
        { from: 'favicon.ico', to: '' },
        { from: 'assets', to: 'assets' },
      ],
    }),
  ].filter(Boolean),
  optimization: {
    minimize: !isDevelopment,
  },
  devtool: isDevelopment ? 'eval-source-map' : 'source-map',
};
